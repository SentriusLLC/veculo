#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if .Values.accumulo.manager.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{include "accumulo.fullname" .}}-manager
  labels:
    {{- $component := "manager" }}
  {{- include "accumulo.componentLabels" (dict "Chart" .Chart "Release" .Release "Values" .Values "component" $component) | nindent 4 }}
  {{- with .Values.global.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.accumulo.manager.replicaCount }}
  selector:
    matchLabels:
      {{- include "accumulo.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: manager
  template:
    metadata:
      labels:
        {{- include "accumulo.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: manager
      {{- with .Values.global.commonAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.accumulo.manager.podAntiAffinity.enabled }}
      affinity:
        {{- $component := "manager" }}
        {{- $podAntiAffinity := .Values.accumulo.manager.podAntiAffinity }}
        {{- include "accumulo.podAntiAffinity" (dict "Chart" .Chart "Release" .Release "Values" .Values "component" $component "podAntiAffinity" $podAntiAffinity) | nindent 8 }}
      {{- end }}
      serviceAccountName: {{include "accumulo.serviceAccountName" .}}
      initContainers:
      - name: wait-for-zookeeper
        image: busybox:1.35
        command:
        - /bin/sh
        - -c
        - |
          echo "Waiting for ZooKeeper to be ready..."
          until nc -z {{ include "accumulo.zookeeperHosts" . | replace ":2181" "" }} 2181; do
            echo "Waiting for ZooKeeper..."
            sleep 5
          done
          echo "ZooKeeper is ready"
      - name: wait-for-alluxio
        image: busybox:1.35
        command:
        - /bin/sh
        - -c
        - |
          echo "Waiting for Alluxio master to be ready..."
          until nc -z {{include "accumulo.fullname" .}}-alluxio-master 19998; do
            echo "Waiting for Alluxio master..."
            sleep 5
          done
          echo "Alluxio master is ready"
      - name: init-accumulo
        image: {{ include "accumulo.image" . }}
        imagePullPolicy: {{ .Values.accumulo.image.pullPolicy }}
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "=== Accumulo Initialization Validation ==="
          
          # Validate Alluxio is accessible
          echo "Validating Alluxio connectivity..."
          ALLUXIO_MASTER="{{ include "accumulo.fullname" . }}-alluxio-master:19998"
          MAX_RETRIES=30
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -s "http://{{ include "accumulo.fullname" . }}-alluxio-master:19999/" > /dev/null 2>&1; then
              echo "✓ Alluxio master web UI is accessible"
              break
            fi
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Waiting for Alluxio master web UI... (attempt $RETRY_COUNT/$MAX_RETRIES)"
            sleep 5
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "✗ ERROR: Alluxio master web UI not accessible after $MAX_RETRIES attempts"
            exit 1
          fi
          # Check if instance is already initialized
          echo "Checking if Accumulo instance already exists..."
          INSTANCE_EXISTS=false
          if /opt/accumulo/bin/accumulo org.apache.accumulo.server.util.ListInstances 2>/dev/null | grep -q "{{ .Values.accumulo.instance.name }}"; then
            echo "✓ Accumulo instance '{{ .Values.accumulo.instance.name }}' already exists"
            INSTANCE_EXISTS=true
            
            # Verify the instance_id file exists in Alluxio
            echo "Verifying instance configuration in Alluxio..."
            if /opt/alluxio/client/bin/alluxio fs test -e "$ALLUXIO_ROOT/instance_id" 2>/dev/null; then
              echo "✓ Accumulo instance_id file found in Alluxio"
            else
              echo "✗ ERROR: Instance exists in ZooKeeper but instance_id file not found in Alluxio"
              echo "Expected file: $ALLUXIO_ROOT/instance_id"
              echo "This indicates a corrupted or incomplete Accumulo installation"
              echo "Resolution: Delete the ZooKeeper data and reinitialize, or restore instance_id to Alluxio"
              exit 1
            fi
          else
            echo "Instance not found, will initialize..."
          fi
          
          # Initialize Accumulo only if it doesn't exist
          if [ "$INSTANCE_EXISTS" = "false" ]; then
            echo "Initializing new Accumulo instance '{{ .Values.accumulo.instance.name }}'..."
            
            # Pre-create the accumulo directory in Alluxio to validate write permissions
            echo "Creating Accumulo directory structure in Alluxio..."
            /opt/alluxio/client/bin/alluxio fs mkdir -p "$ALLUXIO_ROOT" 2>/dev/null || echo "Directory may already exist"
            
            # Initialize Accumulo
            echo "Running accumulo init..."
            if /opt/accumulo/bin/accumulo init \
              --instance-name {{ .Values.accumulo.instance.name }} \
              --password {{ .Values.accumulo.instance.secret }}; then
              echo "✓ Accumulo initialization completed successfully"
              
              # Verify initialization created expected structure
              echo "Verifying Accumulo instance_id file in Alluxio..."
              sleep 3
              
              if /opt/alluxio/client/bin/alluxio fs test -e "$ALLUXIO_ROOT/instance_id" 2>/dev/null; then
                echo "✓ Accumulo instance_id file successfully created in Alluxio"
              else
                echo "✗ ERROR: Accumulo initialization completed but instance_id file not found in Alluxio"
                echo "Expected file: $ALLUXIO_ROOT/instance_id"
                echo "This may indicate Alluxio mount issues or permissions problems"
                exit 1
              fi
            else
              echo "✗ ERROR: Accumulo initialization failed"
              exit 1
            fi
          else
            echo "Skipping initialization - instance already exists"
          fi
          
          echo "=== Accumulo Initialization Validation Complete ==="
        env:
        {{- include "accumulo.commonEnv" . | nindent 8 }}
        - name: ACCUMULO_HOME
          value: "/opt/accumulo"
        volumeMounts:
        - name: accumulo-config
          mountPath: /opt/accumulo/conf/accumulo.properties
          subPath: accumulo.properties
        - name: accumulo-config
          mountPath: /opt/accumulo/conf/accumulo-env.sh
          subPath: accumulo-env.sh
        - name: accumulo-config
          mountPath: /opt/accumulo/conf/log4j2-service.properties
          subPath: log4j2-service.properties
        - name: alluxio-client
          mountPath: /opt/alluxio/client
        - name: hadoop-config
          mountPath: /opt/hadoop/etc/hadoop/core-site.xml
          subPath: core-site.xml
      containers:
      - name: manager
        image: {{ include "accumulo.image" . }}
        imagePullPolicy: {{ .Values.accumulo.image.pullPolicy }}
        command:
        - /opt/accumulo/bin/accumulo
        - manager
        ports:
        - name: client
          containerPort: 9999
          protocol: TCP
        - name: replication
          containerPort: 10001
          protocol: TCP
        env:
        {{- include "accumulo.commonEnv" . | nindent 8 }}
        - name: ACCUMULO_HOME
          value: "/opt/accumulo"
        - name: ACCUMULO_SERVICE_INSTANCE
          value: "manager"
        - name: ALLUXIO_CLIENT_HOME
          value: "/opt/alluxio/client"
        volumeMounts:
        - name: accumulo-config
          mountPath: /opt/accumulo/conf/accumulo.properties
          subPath: accumulo.properties
        - name: accumulo-config
          mountPath: /opt/accumulo/conf/accumulo-env.sh
          subPath: accumulo-env.sh
        - name: accumulo-config
          mountPath: /opt/accumulo/conf/log4j2-service.properties
          subPath: log4j2-service.properties
        - name: logs
          mountPath: /opt/accumulo/logs
        - name: alluxio-client
          mountPath: /opt/alluxio/client
        - name: hadoop-config
          mountPath: /opt/hadoop/etc/hadoop/core-site.xml
          subPath: core-site.xml
        resources:
          {{- toYaml .Values.accumulo.resources.manager | nindent 10 }}
        livenessProbe:
          tcpSocket:
            port: client
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          tcpSocket:
            port: client
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: accumulo-config
        configMap:
          name: {{include "accumulo.fullname" .}}-config
          defaultMode: 0755
      - name: logs
        emptyDir: {}
      - name: alluxio-client
        hostPath:
          path: /srv/alluxio/client
      - name: hadoop-config
        configMap:
          name: {{ include "accumulo.fullname" . }}-core-site
{{- end }}
