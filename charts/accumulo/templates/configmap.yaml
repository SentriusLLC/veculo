#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{include "accumulo.fullname" .}}-config
  labels:
    {{- include "accumulo.labels" . | nindent 4 }}
  {{- with .Values.global.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  accumulo.properties: |
    # Apache Accumulo Configuration for Kubernetes
    ## Instance configuration
    instance.volumes={{ .Values.accumulo.instance.volumes }}
    instance.zookeeper.host={{ include "accumulo.zookeeperHosts" . }}
    instance.secret={{ .Values.accumulo.instance.secret }}

    ## Enable native maps for better performance
    tserver.memory.maps.native.enabled=true

    ## Manager configuration
    manager.recovery.delay=10s
    manager.lease.recovery.waiting.period=5s

    ## Tablet server configuration
    tserver.port.search=true
    tserver.hold.time.max=5m
    tserver.memory.maps.max=1G

    ## Monitor configuration
    monitor.port.client=9995
    monitor.ssl.port=9995

    ## GC configuration
    gc.cycle.start=30s
    gc.cycle.delay=5m

    ## Compactor configuration
    compactor.max.open.files=100

    ## Performance tuning for Kubernetes
    general.rpc.timeout=120s
    tserver.scan.timeout.enable=true
    tserver.scan.timeout.max=5m

    ## Alluxio-specific configuration
    general.vfs.context.class.name=org.apache.accumulo.core.spi.fs.VolumeChooserEnvironment
    general.vfs.cache.dir=/tmp/accumulo-vfs-cache
    general.vfs.classpaths=file:///opt/alluxio/client/.*\.jar

  accumulo-env.sh: |
    #!/usr/bin/env bash
    ## Accumulo environment for Kubernetes deployment

    ## Required environment variables

    export ACCUMULO_LOG_DIR="${ACCUMULO_LOG_DIR:-/opt/accumulo/logs}"
    export HADOOP_HOME="${HADOOP_HOME:-/opt/hadoop}"
    export HADOOP_CONF_DIR="${HADOOP_CONF_DIR:-/opt/hadoop/etc/hadoop}"
    export ZOOKEEPER_HOME="${ZOOKEEPER_HOME:-/opt/zookeeper}"
    export ALLUXIO_CLIENT_HOME="${ALLUXIO_CLIENT_HOME:-/opt/alluxio/client}"

    ## Build classpath
    if [[ -n $CLASSPATH ]]; then
    CLASSPATH="${CLASSPATH}:${ACCUMULO_CONF_DIR}"
    else
    CLASSPATH="${ACCUMULO_CONF_DIR}"
    fi

    # âœ… Add Hadoop configuration FIRST (core-site.xml must be visible before Hadoop libs)
    CLASSPATH="${CLASSPATH}:${HADOOP_CONF_DIR}:${HADOOP_HOME}/etc/hadoop"

    # Add Accumulo libraries
    CLASSPATH="${CLASSPATH}:${ACCUMULO_HOME}/lib/*"

    # Add Hadoop libraries
    CLASSPATH="${CLASSPATH}:${HADOOP_HOME}/share/hadoop/common/*:${HADOOP_HOME}/share/hadoop/client/*"

    # Add ZooKeeper libraries
    ZK_JARS=$(find "${ZOOKEEPER_HOME}" -maxdepth 1 -name '*.jar' -not -name '*slf4j*' -not -name '*log4j*' | paste -sd: -)
    CLASSPATH="${CLASSPATH}:${ZOOKEEPER_HOME}/*:${ZK_JARS}"

    if [ -d "/opt/alluxio/client" ]; then
      ALLUXIO_JARS=$(find /opt/alluxio/client -maxdepth 1 -name '*.jar' | paste -sd: -)
      export ALLUXIO_JARS
      export HADOOP_USER_CLASSPATH_FIRST=true
      export ACCUMULO_CLASSPATH="${ACCUMULO_CLASSPATH}:${ALLUXIO_JARS}"
      export CLASSPATH="${CLASSPATH}:${ALLUXIO_JARS}"
    fi

    # Tell Accumulo startup scripts to use this classpath as-is
    export ACCUMULO_USE_CUSTOM_CLASSPATH=true


    export CLASSPATH

    ## JVM options for all processes
    JAVA_OPTS=(
      '-XX:OnOutOfMemoryError=kill -9 %p'
      '-XX:-OmitStackTraceInFastThrow'
      '-Djava.net.preferIPv4Stack=true'
      "-Daccumulo.native.lib.path=${ACCUMULO_HOME}/lib/native"
    )

    ## Component-specific JVM options
    case "${ACCUMULO_SERVICE_INSTANCE}" in
      manager)
        JAVA_OPTS=('-Xmx512m' '-Xms512m' "${JAVA_OPTS[@]}")
        ;;
      monitor)
        JAVA_OPTS=('-Xmx256m' '-Xms256m' "${JAVA_OPTS[@]}")
        ;;
      gc)
        JAVA_OPTS=('-Xmx256m' '-Xms256m' "${JAVA_OPTS[@]}")
        ;;
      tserver)
        JAVA_OPTS=('-Xmx1024m' '-Xms1024m' "${JAVA_OPTS[@]}")
        ;;
      compactor)
        JAVA_OPTS=('-Xmx512m' '-Xms512m' "${JAVA_OPTS[@]}")
        ;;
      *)
        JAVA_OPTS=('-Xmx256m' '-Xms64m' "${JAVA_OPTS[@]}")
        ;;
    esac

    ## Logging configuration
    JAVA_OPTS=(
      "-Daccumulo.log.dir=${ACCUMULO_LOG_DIR}"
      "-Daccumulo.application=${ACCUMULO_SERVICE_INSTANCE}_$(hostname)"
      "-Daccumulo.metrics.service.instance=${ACCUMULO_SERVICE_INSTANCE}"
      "-Dlog4j2.statusLoggerLevel=ERROR"
      "-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
      "${JAVA_OPTS[@]}"
    )

    ## Service-specific log configuration
    case "${ACCUMULO_SERVICE_INSTANCE}" in
      monitor | gc | manager | tserver | compactor)
        JAVA_OPTS=('-Dlog4j.configurationFile=log4j2-service.properties' "${JAVA_OPTS[@]}")
        ;;
    esac

    export JAVA_OPTS
    export MALLOC_ARENA_MAX=1

  log4j2-service.properties: |
    # Log4j2 configuration for Accumulo services in Kubernetes

    status = ERROR
    name = AccumuloServiceConfig

    # Console appender for container logs
    appender.console.type = Console
    appender.console.name = STDOUT
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = %d{ISO8601} [%c{2}] %-5p: %m%n

    # File appender for service logs
    appender.file.type = File
    appender.file.name = FILE
    appender.file.fileName = ${sys:accumulo.log.dir}/accumulo-${sys:accumulo.application}.log
    appender.file.layout.type = PatternLayout
    appender.file.layout.pattern = %d{ISO8601} [%c{2}] %-5p: %m%n

    # Root logger
    rootLogger.level = INFO
    rootLogger.appenderRef.console.ref = STDOUT
    rootLogger.appenderRef.file.ref = FILE

    # Accumulo-specific loggers
    logger.accumulo.name = org.apache.accumulo
    logger.accumulo.level = INFO
    logger.accumulo.additivity = false
    logger.accumulo.appenderRef.console.ref = STDOUT
    logger.accumulo.appenderRef.file.ref = FILE

    # Hadoop/Alluxio loggers (reduce verbosity)
    logger.hadoop.name = org.apache.hadoop
    logger.hadoop.level = WARN

    logger.alluxio.name = alluxio
    logger.alluxio.level = INFO
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "accumulo.fullname" . }}-alluxio-master-config
  labels:
    {{- include "accumulo.labels" . | nindent 4 }}
    app.kubernetes.io/component: alluxio-master
  {{- with .Values.global.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  alluxio-site.properties: |
    # Alluxio configuration for Accumulo storage (Master)
    ## Master configuration
    #alluxio.master.hostname=${env.POD_IP}
    alluxio.master.hostname={{ include "accumulo.fullname" . }}-alluxio-master
    alluxio.job.master.enabled=true
    #alluxio.master.hostname=accumulo-alluxio-master
    alluxio.master.port=19998
    alluxio.master.web.port=19999
    alluxio.master.journal.type=UFS
    alluxio.master.journal.folder=/opt/alluxio/journal

    # Internal (what the master itself uses to talk to its own components)
    alluxio.job.master.hostname={{ include "accumulo.fullname" . }}-alluxio-master
    alluxio.job.master.bind.host=0.0.0.0
    alluxio.job.master.rpc.port=20001
    alluxio.job.master.port=20001

    ## Under storage system configuration
    {{- include "accumulo.storageConfig" . | nindent 4 }}

    {{- if eq .Values.storage.provider "s3" }}
    # S3 configuration
    alluxio.underfs.s3.endpoint={{ .Values.storage.s3.endpoint }}
    alluxio.underfs.s3.region={{ .Values.storage.s3.region }}
    alluxio.underfs.s3.signatureVersion: v4a
    alluxio.underfs.s3.path.style.access: true
    s3a.access.key={{ .Values.storage.s3.accessKey }}
    s3a.secret.key={{ .Values.storage.s3.secretKey }}
    {{- else if eq .Values.storage.provider "minio" }}
    # MinIO configuration
    alluxio.underfs.s3.endpoint={{ .Values.storage.minio.endpoint }}
    alluxio.underfs.s3.disable.dns.buckets=true
    alluxio.underfs.s3.inherit.acl=false
    alluxio.underfs.s3.signatureVersion: v4a
    alluxio.underfs.s3.path.style.access: true
    s3a.access.key={{ .Values.storage.minio.accessKey }}
    s3a.secret.key={{ .Values.storage.minio.secretKey }}
    {{- else if eq .Values.storage.provider "gcs" }}
    # GCS configuration
    fs.gcs.project.id={{ .Values.storage.gcs.projectId }}
    fs.gcs.auth.service.account.json.keyfile=/opt/alluxio/secrets/gcs-key.json
    {{- else if eq .Values.storage.provider "azure" }}
    # Azure configuration
    fs.azure.account.key.{{ .Values.storage.azure.account }}.dfs.core.windows.net={{ .Values.storage.azure.key }}
    {{- end -}}

    ## Network and RPC settings
    alluxio.network.host.resolution.timeout=5s
    alluxio.user.rpc.retry.max.duration=10s
    alluxio.user.rpc.retry.base.sleep=1s

    ## Security configuration
    alluxio.security.authentication.type=NOSASL
    alluxio.security.authorization.permission.enabled=false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "accumulo.fullname" . }}-alluxio-worker-config
  labels:
    {{- include "accumulo.labels" . | nindent 4 }}
    app.kubernetes.io/component: alluxio-worker
  {{- with .Values.global.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  alluxio-site.properties: |
    # Alluxio configuration for Accumulo storage (Worker)
    ## Worker configuration
    alluxio.master.hostname={{ include "accumulo.fullname" . }}-alluxio-master
    alluxio.master.rpc.port=19998
    alluxio.master.web.port=19999
    alluxio.worker.hostname={{ include "accumulo.fullname" . }}-alluxio-worker
    alluxio.worker.port=29999
    alluxio.worker.web.port=30000
    alluxio.worker.data.port=29999
    alluxio.worker.rpc.port=29999
    alluxio.worker.rpc.bind.host=0.0.0.0
    alluxio.worker.data.bind.host=0.0.0.0
    alluxio.worker.web.bind.host=0.0.0.0

    ## Memory and storage configuration
    alluxio.worker.memory.size={{ .Values.alluxio.properties.alluxio.worker.memory.size }}
    alluxio.worker.tieredstore.levels=1
    alluxio.worker.tieredstore.level0.alias=MEM
    alluxio.worker.tieredstore.level0.dirs.path=/opt/ramdisk
    alluxio.worker.tieredstore.level0.dirs.quota={{ .Values.alluxio.properties.alluxio.worker.memory.size }}
    alluxio.worker.tieredstore.level0.watermark.high.ratio=0.9
    alluxio.worker.tieredstore.level0.watermark.low.ratio=0.7

    ## Under storage system configuration
    {{- include "accumulo.storageConfig" . | nindent 4 }}

    {{- if eq .Values.storage.provider "s3" }}
    # S3 configuration
    alluxio.underfs.s3.endpoint={{ .Values.storage.s3.endpoint }}
    alluxio.underfs.s3.region={{ .Values.storage.s3.region }}
    s3a.access.key={{ .Values.storage.s3.accessKey }}
    s3a.secret.key={{ .Values.storage.s3.secretKey }}
    {{- else if eq .Values.storage.provider "minio" }}
    # MinIO configuration
    alluxio.underfs.s3.endpoint={{ .Values.storage.minio.endpoint }}
    alluxio.underfs.s3.disable.dns.buckets=true
    alluxio.underfs.s3.inherit.acl=false
    s3a.access.key={{ .Values.storage.minio.accessKey }}
    s3a.secret.key={{ .Values.storage.minio.secretKey }}
    {{- else if eq .Values.storage.provider "gcs" }}
    # GCS configuration
    fs.gcs.project.id={{ .Values.storage.gcs.projectId }}
    fs.gcs.auth.service.account.json.keyfile=/opt/alluxio/secrets/gcs-key.json
    {{- else if eq .Values.storage.provider "azure" }}
    # Azure configuration
    fs.azure.account.key.{{ .Values.storage.azure.account }}.dfs.core.windows.net={{ .Values.storage.azure.key }}
    {{- end -}}

    ## Performance and cache settings
    alluxio.user.file.write.location.policy.class="alluxio.client.file.policy.LocalFirstPolicy"
    alluxio.user.file.write.avoid.eviction.policy.reserved.size.bytes=512MB

    ## Path-specific write modes for Accumulo data
    {{- range $path, $mode := .Values.alluxio.pathWriteModes }}
    alluxio.user.file.write.type.{{ $path }}={{ $mode }}
    {{- end -}}

    ## Network and RPC settings
    alluxio.network.host.resolution.timeout=5s
    alluxio.user.rpc.retry.max.duration=10s
    alluxio.user.rpc.retry.base.sleep=1s

    ## Security configuration
    alluxio.security.authentication.type=NOSASL
    alluxio.security.authorization.permission.enabled=false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "accumulo.fullname" . }}-core-site
  labels:
    {{- include "accumulo.labels" . | nindent 4 }}
data:
  core-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
        <property>
            <name>fs.alluxio.impl</name>
            <value>alluxio.hadoop.FileSystem</value>
        </property>
        <property>
            <name>fs.AbstractFileSystem.alluxio.impl</name>
            <value>alluxio.hadoop.AlluxioFileSystem</value>
        </property>
    </configuration>
